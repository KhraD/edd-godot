name: "Base Export Debug Deploy Godot Project"
on: 
  workflow_call:
    inputs:
      build-target:
        required: true
        type: string
    secrets:
      ANDROID_KEYSTORE_RELEASE_BASE64:
        required: false
      ANDROID_KEYSTORE_RELEASE_USER:
        required: false
      ANDROID_KEYSTORE_RELEASE_PASSWORD:
        required: false
      BUTLER_API_KEY:
        required: false
  workflow_dispatch:
    inputs:
      build-target:
        required: true
        type: choice
        description: choose the build target
        options:
          - debug
          - release

env:
  BUTLER_USER: khrad
  
jobs:
  pass-var:
    name: Pass Variables
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Execute Permission
        run: chmod +x ./.github/initojson.sh        
      - name: Pass Godot Version
        id: pass-version
        run: |
          initojson=$(find "$(pwd)" -name "initojson.sh")
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          echo "godot-version=$(cat project.godot | $initojson | tr -d '\t' | jq -r '.application."config/features".PackedStringArray[0]')" >> $GITHUB_OUTPUT
      - name: Pass Build Target
        id: pass-build-target
        run: echo "build-target=${{ inputs.build-target != '' && inputs.build-target || github.ref_name }}" >> $GITHUB_OUTPUT
      - name: Pass Project 
        id: pass-project
        run: |
          initojson=$(find "$(pwd)" -name "initojson.sh")
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          echo "project=$(cat project.godot | $initojson | tr -d '\t' | jq -r 'tojson')" >> $GITHUB_OUTPUT               
      - name: Pass Exports  
        id: pass-exports
        run: |
          initojson=$(find "$(pwd)" -name "initojson.sh")
          cd $(find . -name "export_presets.cfg" | grep -v "godot.cpp" | xargs dirname)
          echo "export=$(cat export_presets.cfg | $initojson | tr -d '\t' | jq -r 'tojson')" >> $GITHUB_OUTPUT
      - name: Pass Indexes  
        id: pass-idxs
        run: |
          initojson=$(find "$(pwd)" -name "initojson.sh")
          cd $(find . -name "export_presets.cfg" | grep -v "godot.cpp" | xargs dirname)
          
          mat_idxs_notapple=$(cat export_presets.cfg | $initojson | tr -d '\t' \
            | jq -c '[to_entries[] | select(.key | test("preset\\.\\d+$")) | select(.value.platform != "macOS" and .value.platform != "iOS")  | .key | gsub("preset.";"") | tonumber]')
          mat_idxs_apple=$(cat export_presets.cfg | $initojson | tr -d '\t' \
            | jq -c '[to_entries[] | select(.key | test("preset\\.\\d+$")) | select(.value.platform == "macOS" or  .value.platform == "iOS")  | .key | gsub("preset.";"") | tonumber]')
          mat_idxs=$(cat export_presets.cfg | $initojson | tr -d '\t' \
            | jq -c '[to_entries[] | select(.key | test("preset\\.\\d+$")) | .key | gsub("preset.";"") | tonumber]')
            
          mat_idxs_notapple="{\"mat-idxs\":$mat_idxs_notapple}"
          mat_idxs_apple="{\"mat-idxs\":$mat_idxs_apple}"
          mat_idxs="{\"mat-idxs\":$mat_idxs}"
                    
          echo "mat-idxs-notapple=$mat_idxs_notapple" >> $GITHUB_OUTPUT
          echo "mat-idxs-apple=$mat_idxs_apple" >> $GITHUB_OUTPUT
          echo "mat-idxs=$mat_idxs" >> $GITHUB_OUTPUT
      - name: Pass has Extension
        id: pass-has-extension
        run: |
          extension_dir=$(find . -name "godot-cpp") || true;
          has_extension=$([ -n "$extension_dir" ] && echo true) || true;
          echo "has-extension=$has_extension" >> $GITHUB_OUTPUT
      - name: Pass Sanitized Preset Names
        id: pass-sanitized-export-names
        run: |
          initojson=$(find "$(pwd)" -name "initojson.sh")
          cd $(find . -name "export_presets.cfg" | grep -v "godot.cpp" | xargs dirname)
          cat export_presets.cfg | $initojson | tr -d '\t' \
            | jq -c '[to_entries[] 
            | select(.key | test("preset\\.\\d+$"))] 
            | map({"key":.key,"value":{"sanitized-name":(.value.name | ascii_downcase | gsub("[[:space:]]+"; "-") | gsub("[^a-z0-9._-]"; ""))}}) 
            | from_entries' > sanitized_export_names.json
          echo "sanitized-export-names=$(cat sanitized_export_names.json)" >> $GITHUB_OUTPUT
      - name: Pass Release Filenames
        id: pass-release-filenames
        run: |
          cd $(find . -name "export_presets.cfg" | grep -v "godot.cpp" | xargs dirname)
          cat sanitized_export_names.json \
            | jq -cr '[to_entries[] | "releases/" + .value."sanitized-name" + ".zip"] | join("\n")' > release-filenames.txt
          echo "release-filenames<<EOF" >> $GITHUB_OUTPUT
          cat release-filenames.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Print Variables
        run: |
          cat << EOF
          godot-version: ${{ steps.pass-version.outputs.godot-version }}
          
          build-target: ${{ steps.pass-build-target.outputs.build-target }}
          
          project: ${{ steps.pass-project.outputs.project }}
          
          export: ${{ steps.pass-exports.outputs.export }}
          
          mat-idxs-notapple: ${{ steps.pass-idxs.outputs.mat-idxs-notapple }}
          
          mat-idxs-apple: ${{ steps.pass-idxs.outputs.mat-idxs-apple }}
          
          mat-idxs: ${{ steps.pass-idxs.outputs.mat-idxs }}
          
          has-extension: ${{ steps.pass-has-extension.outputs.has-extension }}
          
          sanitized-export-names: ${{ steps.pass-sanitized-export-names.outputs.sanitized-export-names }}
          
          release-filenames: ${{ steps.pass-release-filenames.outputs.release-filenames }}          
          EOF         
    outputs: 
      godot-version: ${{ steps.pass-version.outputs.godot-version }}
      build-target: ${{ steps.pass-build-target.outputs.build-target }}
      project: ${{ steps.pass-project.outputs.project }}
      export: ${{ steps.pass-exports.outputs.export }}
      mat-idxs-notapple: ${{ steps.pass-idxs.outputs.mat-idxs-notapple }}
      mat-idxs-apple: ${{ steps.pass-idxs.outputs.mat-idxs-apple }}
      mat-idxs: ${{ steps.pass-idxs.outputs.mat-idxs-apple }}
      has-extension: ${{ steps.pass-has-extension.outputs.has-extension }}
      sanitized-export-names: ${{ steps.pass-sanitized-export-names.outputs.sanitized-export-names }}
      release-filenames: ${{ steps.pass-release-filenames.outputs.release-filenames }}
  
  verify:
    name: Verify
    runs-on: ubuntu-latest
    needs: [pass-var]    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Verify Version
        run: |
          echo "Verifying version"
          if [ -z '${{ fromJson(needs.pass-var.outputs.project).application['config/version'] }}' ]; then
            echo "ERROR - Project should have a defined version"
            exit 1
          fi
  export:
    name: Export - ${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}', matrix.mat-idxs)].name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.pass-var.outputs.mat-idxs-notapple) }}
    needs: [pass-var,verify]
    container:
      image: ghcr.io/khrad/godot-builder:${{ needs.pass-var.outputs.godot-version }}      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true 
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Setup
        id: setup
        run: |
          mkdir -v -p ~/.local/share/godot
          mkdir -v -p ~/.config/
          mv /root/.config/godot ~/.config/godot
          mv /root/.local/share/godot/export_templates ~/.local/share/godot/export_templates
          
          export_platform="${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}', matrix.mat-idxs)].platform }}"
          export_platform=$(echo $export_platform | awk '{print tolower($1)}')
          echo "export_platform=$export_platform"
          echo "export_platform=$export_platform" >> $GITHUB_ENV       
          
          export_architectures="${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}.options', matrix.mat-idxs)]['binary_format/architecture'] }}"
          android_archs=""
          [ '${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}.options', matrix.mat-idxs)]['architectures/armeabi-v7a'] }}' = 'true' ] && android_archs="$android_archs arm32"
          [ '${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}.options', matrix.mat-idxs)]['architectures/arm64-v8a'] }}' = 'true' ]   && android_archs="$android_archs arm64"
          [ '${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}.options', matrix.mat-idxs)]['architectures/x86'] }}' = 'true' ]         && android_archs="$android_archs x86_32"
          [ '${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}.options', matrix.mat-idxs)]['architectures/x86_64'] }}' = 'true' ]      && android_archs="$android_archs x86_64"          
          export_architectures=$(echo "$export_architectures $android_archs" | xargs)          
          echo "export_architectures=$export_architectures"
          echo "export_architectures=$export_architectures" >> $GITHUB_ENV
                    
          export_name="${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}', matrix.mat-idxs)].name }}"
          echo "export_name=$export_name"
          echo "export_name=$export_name" >> $GITHUB_ENV
          echo "export_name=$export_name" >> $GITHUB_OUTPUT
                    
          sanitized_export_name="${{ fromJson(needs.pass-var.outputs.sanitized-export-names)[format('preset.{0}', matrix.mat-idxs)].sanitized-name }}"
          echo "sanitized_export_name=$sanitized_export_name"
          echo "sanitized_export_name=$sanitized_export_name" >> $GITHUB_ENV
          echo "sanitized_export_name=$sanitized_export_name" >> $GITHUB_OUTPUT
                    
          project_name="${{ fromJson(needs.pass-var.outputs.project).application['config/name'] }}"
          project_name_nospace="$(echo $project_name | tr ' ' '-')"
          project_version="${{ fromJson(needs.pass-var.outputs.project).application['config/version'] }}"
          file_extension=""
          case "$export_platform" in
            windows) file_extension=".exe"
            ;;
            linux)   file_extension=".$export_architectures"
            ;;
            web)     file_extension=".html"
            ;;
            android) 
              if [ '${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}.options', matrix.mat-idxs)]['gradle_build/export_format'] }}' = '0' ]; then
                     file_extension=".apk"
              else
                     file_extension=".aab"
              fi
            ;;
            *)       file_extension=".zip"
          esac
          export_file_name="${project_name_nospace}-v${project_version}${file_extension}"          
          echo "export_file_name=$export_file_name"
          echo "export_file_name=$export_file_name" >> $GITHUB_ENV
          
          ###
          
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          sed 's@gradle_build/use_gradle_build=.*@gradle_build/use_gradle_build=true@g' -i export_presets.cfg
          sed 's@gradle_build/gradle_build_directory=.*@gradle_build/gradle_build_directory="/opt/godot/gradle"@g' -i export_presets.cfg          
          
          hasEtcConfig=$(cat project.godot | { grep "import_etc2_astc" || true; })
          uses_etc2_astc="false"
          case "$export_platform" in android|macos|ios) uses_etc2_astc="true" ;; esac
          if [ -n "$hasEtcConfig" ]; then
              sed "s@textures/vram_compression/import_etc2_astc=\".*\"@textures/vram_compression/import_etc2_astc=$uses_etc2_astc@g" -i project.godot
          else
              sed "s@\[rendering\]@\[rendering\]\ntextures/vram_compression/import_etc2_astc=$uses_etc2_astc@g" -i project.godot
          fi
      - name: Set Dotnet
        if: ${{ fromJson(needs.pass-var.outputs.project).dotnet != null }}
        run: |
          if [ "$export_platform" = "web" ]; then
            echo "Godot for dotnet currently doesn't support exporting to web platform"
            exit 1
          fi
          echo "2" | update-alternatives --config godot >> /dev/null
          ln -nsf /opt/godot/mono/gradle /opt/godot/gradle
      - name: Build GDExtensions
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        run: |
          if [ "$export_platform" = "web" ]; then
            echo "Godot currently doesn't support exporting to web platform with GDExtensions"
            exit 1
          fi
          for architecture in $export_architectures; do
            scons_command="\
              scons platform=$export_platform \
              arch=$architecture \
              verbose=yes \
              use_llvm=yes \
              lto=full"
            
            target=""
            case "${{ needs.pass-var.outputs.build-target }}" in
              debug) target="\
                target=template_debug \
                debug_symbols=yes \
                symbols_visibility=visible \
                disable_exceptions=false"
              ;;
              release) target="target=template_release"
              ;;
              *) target="target=template_debug"
              ;;
            esac
            
            xcompile=""
            if [ "$export_platform" = "windows" ]; then
              xcompile="use_mingw=yes \
                mingw_prefix=/opt/llvm-mingw/current"
            fi
            
            scons_command=$(echo "$scons_command $target $xcompile" | xargs)
            echo "scons_command: $scons_command"
            eval "$scons_command"
          done
      - name: Export
        run: |
          if [ '${{ needs.pass-var.outputs.build-target }}' = 'release' ] && [ "$export_platform" = "android" ]; then          
            echo ${{ secrets.ANDROID_KEYSTORE_RELEASE_BASE64 }} | base64 --decode > /opt/godot/release.keystore
            export GODOT_ANDROID_KEYSTORE_RELEASE_PATH=/opt/godot/release.keystore
            export GODOT_ANDROID_KEYSTORE_RELEASE_USER=${{ secrets.ANDROID_KEYSTORE_RELEASE_USER }}
            export GODOT_ANDROID_KEYSTORE_RELEASE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_RELEASE_PASSWORD }}
          fi
          mkdir -v -p "build/$sanitized_export_name"
          export_dir="$(readlink -f build)"
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          
          echo "godot --headless --verbose \
          --export-${{ needs.pass-var.outputs.build-target }} \
          \"$export_name\" \
          \"$export_dir/$sanitized_export_name/$export_file_name\""
          
          godot --headless --verbose \
          --export-${{ needs.pass-var.outputs.build-target }} \
          "$export_name" \
          "$export_dir/$sanitized_export_name/$export_file_name"          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.setup.outputs.sanitized_export_name }}
          path: build/${{ steps.setup.outputs.sanitized_export_name }}
  export-apple:
    name: Export Apple - ${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}', matrix.mat-idxs)].name }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.pass-var.outputs.mat-idxs-apple) }}
    needs: [pass-var,verify]
    steps:
      - name: Print Idx
        run: |
          echo ${{ matrix.mat-idxs }}
  tag-release:
    name: Tag Release
    runs-on: ubuntu-latest
    needs: [pass-var,export]
    if: ${{ !cancelled() && !failure() && needs.pass-var.outputs.build-target == 'release' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Tag
        id: tag
        run: |
          release_version='${{ fromJson(needs.pass-var.outputs.project).application['config/version'] }}'
          tag_name="v${release_version}-${{ github.head_ref || github.ref_name }}"
          git tag $tag_name ${{ github.head_ref || github.ref_name }}
          git push origin $tag_name
          echo "tag-name=$tag_name"
          echo "tag-name=$tag_name" >> $GITHUB_OUTPUT
    outputs:
      tag-name: ${{ steps.tag.outputs.tag-name }}
      
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [pass-var,tag-release]
    if: ${{ !cancelled() && !failure() && needs.pass-var.outputs.build-target == 'release' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Execute Permission
        run: chmod +x ./.github/initojson.sh
      - name: Setup
        id: setup
        run: |
          initojson=$(find "$(pwd)" -name "initojson.sh")
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          export_names_nospace=$(cat export_presets.cfg | $initojson | tr -d '\t' \
           | jq -rc '[to_entries[] | select(.key | test("preset\\.\\d+$")) | .value.name] | map(ascii_downcase | gsub(" ";"-")) | join(" ")')
          echo "export_names_nospace=$export_names_nospace"
          echo "export_names_nospace=$export_names_nospace" >> $GITHUB_ENV
      - name: Release Notes
        run: |
          git pull --all          
          git checkout ${{needs.tag-release.outputs.tag-name}}
          diff --changed-group-format='%>' --unchanged-group-format='' <( git show HEAD~1:CHANGELOG.md ) CHANGELOG.md > RELEASE_NOTES.md || true
      - name: Download Artifacts
        uses: actions/download-artifact@v4
      - name: Zip Files
        run: |
          mkdir releases
          for name_nospace in ${export_names_nospace}; do
            zip -r releases/$name_nospace $name_nospace || true
          done      
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: Release
          body_path: RELEASE_NOTES.md
          generate_release_notes: true
          append_body: true
          make_latest: true
          fail_on_unmatched_files: false
          tag_name: ${{ needs.tag-release.outputs.tag-name }}
          files: |
            ${{ needs.pass-var.outputs.release-filenames }}
            
  deploy:
    name: Deploy - ${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}', matrix.mat-idxs)].name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.pass-var.outputs.mat-idxs-notapple) }}
    needs: [pass-var,release]
    container:
      image: ghcr.io/khrad/godot-deployer:latest
    if: ${{ !cancelled() && !failure() && needs.pass-var.outputs.build-target == 'release' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ fromJson(needs.pass-var.outputs.sanitized-export-names)[format('preset.{0}', matrix.mat-idxs)].sanitized-name }}
          path: ${{ fromJson(needs.pass-var.outputs.sanitized-export-names)[format('preset.{0}', matrix.mat-idxs)].sanitized-name }}
      - name: Setup
        id: setup
        run: |
          project_name=$(echo "${{ fromJson(needs.pass-var.outputs.project).application['config/name'] }}" | jq -Rr 'ascii_downcase | gsub("[[:space:]]+"; "-") | gsub("[^a-z0-9._-]"; "")')
          echo "project_name=$project_name" >> $GITHUB_ENV
          export_name='${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}', matrix.mat-idxs)].name }}'
          echo "export_name=$export_name" >> $GITHUB_ENV
          sanitized_export_name=${{ fromJson(needs.pass-var.outputs.sanitized-export-names)[format('preset.{0}', matrix.mat-idxs)].sanitized-name }}
          echo "sanitized_export_name=$sanitized_export_name" >> $GITHUB_ENV
          config_version='${{ fromJson(needs.pass-var.outputs.project).application['config/version'] }}'
          echo "config_version=$config_version" >> $GITHUB_ENV
          
          if [ ! -e ${sanitized_export_name} ]; then            
            echo "directory ${sanitized_export_name} wasn't found"
            exit 1
          fi
          
          if [ "${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}', matrix.mat-idxs)].platform }}" = "Web" ]; then
            cd ${sanitized_export_name} && \
              mv $(find . -maxdepth 1 -type f -name "*.html" | head -n 1) index.html
          fi
      - name: Deploy to Itch.IO
        id: itchio
        run: |
          export_dir="$(readlink -f build)"
          echo "butler push $sanitized_export_name ${BUTLER_USER}/${project_name}:$sanitized_export_name --userversion ${config_version}"
          butler push $sanitized_export_name ${BUTLER_USER}/${project_name}:$sanitized_export_name --userversion ${config_version}
          butler status ${BUTLER_USER}/${project_name}:$sanitized_export_name
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      - name: Deploy to GitHub Pages    
        if: ${{ fromJson(needs.pass-var.outputs.export)[format('preset.{0}', matrix.mat-idxs)].platform == 'Web' }}
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: ${{ fromJson(needs.pass-var.outputs.sanitized-export-names)[format('preset.{0}', matrix.mat-idxs)].sanitized-name }} # The folder the action should deploy.
          single-commit: true